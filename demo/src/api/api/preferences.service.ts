/**
 * SalesAgility REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { ModelObject } from '../model/model-object';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class PreferencesService {

  protected basePath = 'http://localhost/forkedSuite/Api/V8';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   *
   * Returns a collections of beans
   * @param module Name of the module
   * @param fieldsContacts Filtering attributes of each bean
   * @param pageSize Number of beans showed in a page
   * @param pageNumber Number of a page
   * @param sort Sorting the bean list based on this parameter. Ascending by default, but if sort is prefixed with a minus (U+002D HYPHEN-MINUS, &#x27;-&#x27;), sort will be descending
   * @param filterOperator Filtering the bean collection and using it between two or more conditions as logical operator. Only one level conditions are supported so far. Supported operators: AND, OR
   * @param filterNameEq Filtering the bean collections by conditions. The [name] is the  bean&#x27;s property, the [eq] is a comparison operator. Supported operators: EQ, NEQ, GT, GTE, LT, LTE
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userPreferencesGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public userPreferencesGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public userPreferencesGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public userPreferencesGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling userPreferencesGet.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('get', `${this.basePath}/user-preferences/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


  /**
   *
   * Returns a collections of beans
   * @param module Name of the module
   * @param fieldsContacts Filtering attributes of each bean
   * @param pageSize Number of beans showed in a page
   * @param pageNumber Number of a page
   * @param sort Sorting the bean list based on this parameter. Ascending by default, but if sort is prefixed with a minus (U+002D HYPHEN-MINUS, &#x27;-&#x27;), sort will be descending
   * @param filterOperator Filtering the bean collection and using it between two or more conditions as logical operator. Only one level conditions are supported so far. Supported operators: AND, OR
   * @param filterNameEq Filtering the bean collections by conditions. The [name] is the  bean&#x27;s property, the [eq] is a comparison operator. Supported operators: EQ, NEQ, GT, GTE, LT, LTE
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userPreferencesPatch(id: string, body: {userPreferenceName: string, userPreferenceValue: string }, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public userPreferencesPatch(id: string, body: {userPreferenceName: string, userPreferenceValue: string }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public userPreferencesPatch(id: string, body: {userPreferenceName: string, userPreferenceValue: string }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public userPreferencesPatch(id: string, body: {userPreferenceName: string, userPreferenceValue: string }, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling userPreferencesGet.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('patch', `${this.basePath}/user-preferences/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
